name: Build Production APK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx expo install --fix

      - name: Setup Expo CLI
        run: npm install -g @expo/cli@latest

      - name: Verify project structure
        run: |
          echo "Checking project structure..."
          ls -la
          echo "Checking source files..."
          ls -la src/components/
          ls -la src/services/
          ls -la src/utils/
          echo "Checking templates..."
          ls -la src/assets/templates/ | head -10

      - name: Create proper assets if missing
        run: |
          mkdir -p assets
          
          # Create a proper 1024x1024 PNG for production
          # This is a minimal but valid PNG that won't cause crashes
          cat > create_icon.py << 'EOF'
          from PIL import Image
          import os
          
          # Create a simple colored square icon
          def create_icon(filename, size, color):
              img = Image.new('RGBA', (size, size), color)
              img.save(filename, 'PNG')
              print(f"Created {filename} ({size}x{size})")
          
          # Create required assets
          if not os.path.exists('assets/icon.png'):
              create_icon('assets/icon.png', 1024, (99, 102, 241, 255))  # Purple
          
          if not os.path.exists('assets/adaptive-icon.png'):
              create_icon('assets/adaptive-icon.png', 1024, (99, 102, 241, 255))
          
          if not os.path.exists('assets/splash.png'):
              create_icon('assets/splash.png', 1284, (238, 242, 255, 255))  # Light purple
          
          if not os.path.exists('assets/favicon.png'):
              create_icon('assets/favicon.png', 48, (99, 102, 241, 255))
          EOF
          
          pip install Pillow
          python create_icon.py
          
          echo "Verifying assets..."
          ls -la assets/

      - name: Clear Expo cache
        run: npx expo start --clear --non-interactive || true

      - name: Generate Android project
        run: |
          echo "Generating Android project for production..."
          npx expo prebuild --platform android --clean --non-interactive
          
          echo "Verifying Android project..."
          ls -la android/
          ls -la android/app/src/main/

      - name: Configure Gradle for production
        run: |
          cd android
          
          # Make gradlew executable
          chmod +x gradlew
          
          # Add production-safe Gradle properties
          cat >> gradle.properties << 'EOF'
          
          # Production build optimizations
          org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          org.gradle.daemon=true
          
          # Android settings
          android.useAndroidX=true
          android.enableJetifier=true
          android.enableR8.fullMode=false
          
          # Disable unnecessary features for stability
          org.gradle.unsafe.configuration-cache=false
          EOF
          
          # Update Gradle wrapper
          echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-8.10.2-all.zip" >> gradle/wrapper/gradle-wrapper.properties
          echo "networkTimeout=10000" >> gradle/wrapper/gradle-wrapper.properties
          echo "validateDistributionUrl=true" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties

      - name: Build production APK
        run: |
          cd android
          
          echo "Cleaning project..."
          ./gradlew clean --info
          
          echo "Building release APK..."
          ./gradlew assembleRelease --stacktrace --info --no-daemon
          
          echo "Verifying APK was created..."
          ls -la app/build/outputs/apk/release/
          
          # Check APK size (should be reasonable)
          APK_SIZE=$(stat -f%z app/build/outputs/apk/release/app-release.apk 2>/dev/null || stat -c%s app/build/outputs/apk/release/app-release.apk)
          echo "APK size: $APK_SIZE bytes"
          
          if [ $APK_SIZE -lt 1000000 ]; then
            echo "⚠️ APK seems too small, might be missing assets"
          else
            echo "✅ APK size looks good"
          fi

      - name: Upload production APK
        uses: actions/upload-artifact@v4
        with:
          name: coloring-book-production-apk
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 30

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-failure
          path: |
            android/app/build/outputs/logs/
            android/build/outputs/logs/
            android/gradle.log
          retention-days: 7